import java.awt.Color;
import java.awt.Component;
import java.util.Arrays;
import java.util.List;

import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;

public class searchUI extends javax.swing.JDialog {

    /**
     * Creates new form testUI
     */
	
	java_sql js = new java_sql();
	
    public searchUI(Object[][] results, String key) {
    	tableEntries = results;
    	searchFor = key;
    	initTableModel();
    	initTableRenderer();
        initComponents();
    }

    private void initTableRenderer()
    {
    	myTableRenderer = new MyTableCellRenderer();
    }
    
    private void initTableModel()
    {
    	myTableModel = new MyTableModel();
    }
    
    private void initAtt()
    {
//    	for(Object[]  :  )
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        sTable = new javax.swing.JTable();
        resBar = new javax.swing.JToolBar();
        absentB = new javax.swing.JButton();
        lateB = new javax.swing.JButton();
        presentB = new javax.swing.JButton();
        excusedB = new javax.swing.JButton();
        sFor = new javax.swing.JLabel();
        sKeyLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        sTable.setModel(myTableModel);

        jScrollPane1.setViewportView(sTable);
        sTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(sTable);
        sTable.getColumnModel().getColumn(0).setResizable(false);
        sTable.getColumnModel().getColumn(0).setPreferredWidth(40);
        sTable.getColumnModel().getColumn(1).setResizable(false);
        sTable.getColumnModel().getColumn(1).setPreferredWidth(40);
        sTable.getColumnModel().getColumn(2).setResizable(false);
        sTable.getColumnModel().getColumn(2).setMinWidth(75);
        sTable.getColumnModel().getColumn(3).sizeWidthToFit();
        sTable.getColumnModel().getColumn(3).setResizable(false);
        sTable.getColumnModel().getColumn(4).sizeWidthToFit();
        sTable.getColumnModel().getColumn(4).setResizable(false);
        sTable.getColumnModel().getColumn(5).sizeWidthToFit();
        sTable.getColumnModel().getColumn(5).setResizable(false);
        sTable.getColumnModel().getColumn(5).setPreferredWidth(50);

        resBar.setFloatable(false);
        resBar.setRollover(true);
        
        absentB.setBackground(new java.awt.Color(255, 0, 0));
        absentB.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        absentB.setForeground(new java.awt.Color(255, 255, 255));
        absentB.setText("A");
        absentB.setToolTipText("Absent");
        absentB.setActionCommand("Absent");
        absentB.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        absentB.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        absentB.setFocusable(false);
        absentB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        absentB.setMaximumSize(new java.awt.Dimension(40, 40));
        absentB.setMinimumSize(new java.awt.Dimension(40, 40));
        absentB.setPreferredSize(new java.awt.Dimension(40, 40));
        absentB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        absentB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absentBActionPerformed(evt);
            }
        });
        resBar.add(absentB);

        lateB.setBackground(new java.awt.Color(255, 204, 0));
        lateB.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lateB.setText("L");
        lateB.setToolTipText("Late");
        lateB.setActionCommand("Late");
        lateB.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lateB.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lateB.setFocusable(false);
        lateB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lateB.setMargin(new java.awt.Insets(2, 20, 2, 14));
        lateB.setMaximumSize(new java.awt.Dimension(40, 40));
        lateB.setMinimumSize(new java.awt.Dimension(40, 40));
        lateB.setPreferredSize(new java.awt.Dimension(40, 40));
        lateB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lateB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lateBActionPerformed(evt);
            }
        });
        resBar.add(lateB);

        presentB.setBackground(new java.awt.Color(0, 204, 0));
        presentB.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        presentB.setText("P");
        presentB.setToolTipText("Present");
        presentB.setActionCommand("Present");
        presentB.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        presentB.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        presentB.setFocusable(false);
        presentB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        presentB.setMargin(new java.awt.Insets(2, 20, 2, 14));
        presentB.setMaximumSize(new java.awt.Dimension(40, 40));
        presentB.setMinimumSize(new java.awt.Dimension(40, 40));
        presentB.setPreferredSize(new java.awt.Dimension(40, 40));
        presentB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        presentB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presentBActionPerformed(evt);
            }
        });
        resBar.add(presentB);

        excusedB.setBackground(new java.awt.Color(153, 153, 255));
        excusedB.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        excusedB.setText("E");
        excusedB.setToolTipText("Excused");
        excusedB.setActionCommand("Excused");
        excusedB.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        excusedB.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        excusedB.setFocusable(false);
        excusedB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        excusedB.setMargin(new java.awt.Insets(2, 20, 2, 14));
        excusedB.setMaximumSize(new java.awt.Dimension(40, 40));
        excusedB.setMinimumSize(new java.awt.Dimension(40, 40));
        excusedB.setPreferredSize(new java.awt.Dimension(40, 40));
        excusedB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        excusedB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excusedBActionPerformed(evt);
            }
        });
        resBar.add(excusedB);

        sFor.setText("Search Results for:");
        sFor.setFont(new java.awt.Font("Tahoma", 0, 36));
        
        sKeyLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        sKeyLabel.setText("'" + searchFor + "'");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(resBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sFor)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(sKeyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sFor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sKeyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resBar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void absentBActionPerformed(java.awt.event.ActionEvent evt)
    {               
		int current_row = sTable.getSelectedRow();
		
		updateClasslist(current_row, "absent");
		
		myTableModel.setRowColour(current_row, Color.RED);
    }                                       

    private void lateBActionPerformed(java.awt.event.ActionEvent evt) 
    {
    	int current_row = sTable.getSelectedRow();
		
    	updateClasslist(current_row, "late");
		
    	myTableModel.setRowColour(current_row, Color.YELLOW);
    }                                      
       
    private void presentBActionPerformed(java.awt.event.ActionEvent evt) 
    {                                         
    	int current_row = sTable.getSelectedRow();
    	
    	updateClasslist(current_row, "present");
		
    	myTableModel.setRowColour(current_row, Color.GREEN);
    }                                        

    private void excusedBActionPerformed(java.awt.event.ActionEvent evt)
    {                                         
    	int current_row = sTable.getSelectedRow();
    	
    	updateClasslist(current_row, "excused");
		
    	myTableModel.setRowColour(current_row, Color.BLUE);
    }                                    

    private void updateClasslist(int row, String status)
	{
		//debugging
//		System.out.println(ID);
		
//		String q = "UPDATE classlist SET status='" + status + "' " +
//					" WHERE student_id LIKE '" + sAtt[row].getStudID + "'"+
//					" AND course_id LIKE '" + attendance.subjNow + "'";
//		js.updateQuery(q);
		
	}
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton absentB;
    private javax.swing.JButton excusedB;
    private javax.swing.JLabel sFor;
    private javax.swing.JLabel sKeyLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable sTable;
    private javax.swing.JToolBar resBar;
    private javax.swing.JButton lateB;
    private javax.swing.JButton presentB;
    // End of variables declaration      
    
    private String searchFor;
    
    //column names duh
    private final static String[] columnNames =	new String [] 
    		{	"IN", 
				"OUT",
				"ID",
				"Last Name",
				"First Name", 
				"Degree Program"
    		};

    //rows in the table
    private static Object[][] tableEntries;

    private classlist sAtt;
    
    private MyTableModel myTableModel;
    private MyTableCellRenderer myTableRenderer;

    //for rendering teh colors
    private static class MyTableCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            MyTableModel model = (MyTableModel) table.getModel();
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            c.setBackground(model.getRowColour(row));
            return c;
        }
    }
    
    //tabel model
    private static class MyTableModel extends AbstractTableModel {
		
    	//TODO optional
    	// lagyan ng alternating colors sa rows/columns
    	
    	//default is white everywhere
    	List<Color> rowColours = Arrays.asList(
    			Color.lightGray, Color.lightGray, Color.lightGray,
    			Color.lightGray, Color.lightGray, Color.lightGray,
    			Color.lightGray, Color.lightGray, Color.lightGray,
    			Color.lightGray, Color.lightGray, Color.lightGray,
    			Color.lightGray, Color.lightGray, Color.lightGray,
    			Color.lightGray, Color.lightGray, Color.lightGray,
    			Color.lightGray, Color.lightGray, Color.lightGray,
    			Color.lightGray, Color.lightGray, Color.lightGray,
    			Color.lightGray, Color.lightGray, Color.lightGray,
    			Color.lightGray, Color.lightGray, Color.lightGray,
    			Color.lightGray, Color.lightGray, Color.lightGray
    			);
    	
    	public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
    	
	    public void setRowColour(int row, Color c) {
	    	
	    	rowColours.set(row, c);
	    	
	    	fireTableRowsUpdated(row, row);
	    }

	    public Color getRowColour(int row) {
	    		    	
	    	return rowColours.get(row);
	    }
		
		@Override
		public String getColumnName(int column) {
			return columnNames[column];
		}
		
		@Override
		public Object getValueAt(int row, int col) {
			return tableEntries[row][col];
		}
		
		@Override
		public int getRowCount() {
			return tableEntries.length;
		}
		
		@Override
		public int getColumnCount() {
			return columnNames.length;
		}
		
		@Override
		public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
			tableEntries[rowIndex][columnIndex] = aValue;
	        fireTableCellUpdated(rowIndex, columnIndex);
		}
		
	}
}
